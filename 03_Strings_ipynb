{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPlbaH6eLvNbznUDD0L0rMD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"XRLfkRk0p-C3","executionInfo":{"status":"error","timestamp":1710117456595,"user_tz":360,"elapsed":15,"user":{"displayName":"Dominguez Garcia Isabela yuritza","userId":"00091104301841814426"}},"outputId":"977495a1-6469-4460-f53e-f09d8f173fd1"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'my_string' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-ef1ce27ce2e5>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmy_other_string\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"my_otro String\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_other_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_string\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\" \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mmy_other_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'my_string' is not defined"]}],"source":["###  Strings  ###\n","my_strin = \"my String\"\n","my_other_string = \"my_otro String\"\n","\n","print(len(my_string))\n","print(len(my_other_string))\n","print(my_string + \" \" + my_other_string)\n","\n","my_new_line_string = \"este es un String con salto de linea\"\n","print(my_new_linea_string)\n","\n","my_tab_string = \"tEste es un String con tabulacion\"\n","print(my_tab_string)\n","\n","my_scape_string = \"tEste es un string  n escapado\"\n","print(my_scape_string)\n","\n","# Formateo\n","\n","name, surname, age = \"Isabela\", \"Dominguez\", 15\n","print(\"my_nombre es {} {} y my edad es {}\".format(name, surname, age))\n","print(\"my nombre es %s %s y mi edad es %d\" % (name, surname, age))\n","prin(\"my nombre es \" + name + \" \" + surname + \" y mi edad es \" + str(age))\n","print(f\"my nombre es {name} {surname} y mi edad es{age}\")\n","\n","\n","# Desenpaquetado de caracteres\n","\n","\n","#Division\n","\n","\n","language_slice = language[1:3]\n","print(language_slice)\n","\n","language_slice = language[1:]\n","print(language_slice)\n","\n","language_slice = language[-2]\n","print(language_slice)\n","\n","language_slice = language [0 : 6 : 2]\n","print(language_slice)\n","\n","# Reverse\n","\n","reversed_language = language [::-1]\n","print(reversed_language)\n","\n","#Funciones del lenguaje\n","\n","\n","# print(language.capitatize()) *primera letra en mayuscula\n","# print(language.upper())      *todas a minusculas\n","# print(language.count(\"t\"))\n","# print(lenguage.isnumeric())\n","# print(language.\"1\" isnumeric())\n","# print(language.lower())\n","# print(language.lower(.isupper())\n","# print(language.staytswith(\"py\"))\n","# print(\"py\" = =\"py\") # no es lo mismo\n","\n","\n","\n"]},{"cell_type":"code","source":["ยก"],"metadata":{"id":"ht5azxDQuhyH"},"execution_count":null,"outputs":[]}]}